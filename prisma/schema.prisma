// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  role          Role      @default(user)
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]

  Manager Manager?

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier])
  @@map("verification_tokens")
}

enum State {
  s1_pendiente
  s2_elaborandose
  s3_elaborando
  s4_validandose
  s5_validando
  s6_aprobandoseOficina
  s7_aprobandoOoficina
  s8_validandoseUNOME
  s9_validadoUNOME
  s10_aprobandosePRONABEC
  s11_aprobandoPRONABEC
}

enum TypeProcess {
  strategy
  operative
  support
}

enum UnidadFuncional {
  unidad_funcional_1  @map("Dirección Ejecutiva")
  unidad_funcional_2  @map("Dirección de Coordinación Nac. y Cooperación Internacional")
  unidad_funcional_3  @map("Dirección de Gestión de Becas")
  unidad_funcional_4  @map("Subdirección de Evaluación y Selección")
  unidad_funcional_5  @map("Subdirección de Seguimiento y Supervisión")
  unidad_funcional_6  @map("Dirección de Gestión de Crédito Educativo")
  unidad_funcional_7  @map("Subdirección de Evaluación y Otorgamiento")
  unidad_funcional_8  @map("Subdirección de Seguimiento y Cumplimiento")
  unidad_funcional_9  @map("Dirección de Acompañamiento Socioemocional y Bienestar")
  unidad_funcional_10 @map("Oficina de Asesoría Jurídica")
  unidad_funcional_11 @map("Oficina de Planeamiento y Presupuesto")
  unidad_funcional_12 @map("Unidad de Modernización de La Gestión")
  unidad_funcional_13 @map("Unidad de Estudios Sociales e Investigación")
  unidad_funcional_14 @map("Unidad de Planeamiento")
  unidad_funcional_15 @map("Unidad de Presupuesto")
  unidad_funcional_16 @map("Oficina de Tecnologías de la Información")
  unidad_funcional_17 @map("Oficina de Gestión de Recursos Humanos")
  unidad_funcional_18 @map("Oficina de Atención a la Ciudadanía y Gestión Documental")
  unidad_funcional_19 @map("Oficina de Comunicaciones y Relaciones Institucionales")
  unidad_funcional_20 @map("Oficina de Administración y Finanzas")
  unidad_funcional_21 @map("Unidad de Abastecimiento")
  unidad_funcional_22 @map("Unidad de Contabilidad y Control Previo")
  unidad_funcional_23 @map("Unidad de Subvenciones y Financiamiento")
  unidad_funcional_24 @map("Unidad de Tesorería")
}

model Owner {
  id              String           @id @default(cuid())
  nombre          String
  apellidos       String
  unidadFuncional UnidadFuncional?

  Process Process[]
}

model Manager {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  Process Process[]
}

model Process {
  id          String      @id @default(cuid())
  code        String
  name        String
  description String
  diagram     String?
  level       String
  type        TypeProcess
  state       State       @default(s1_pendiente)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt

  ownerid String
  owner   Owner  @relation(fields: [ownerid], references: [id])

  Manager   Manager? @relation(fields: [managerId], references: [id])
  managerId String?

  sons         Process[] @relation("sons")
  sonsRelation Process[] @relation("sons")

  Mapa   Mapa?   @relation(fields: [mapaId], references: [id])
  mapaId String?
}

model Mapa {
  id     String @id @default(cuid())
  name   String
  input  String
  output String

  process Process[]
}
